//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace ShipStation.NetSdk
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IShipStationClient
    {
        /// <summary>
        /// Add funds to carrier account
        /// </summary>
        /// <remarks>
        /// Adds funds to a carrier account using the payment information on file. &lt;br&gt; 
        /// <br/>Requires approval from apisupport@shipstation.com before use.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddfundstocarrieraccountAsync(AddfundstocarrieraccountRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add funds to carrier account
        /// </summary>
        /// <remarks>
        /// Adds funds to a carrier account using the payment information on file. &lt;br&gt; 
        /// <br/>Requires approval from apisupport@shipstation.com before use.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddfundstocarrieraccountAsync(AddfundstocarrieraccountRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Carrier By Code
        /// </summary>
        /// <remarks>
        /// Retrieves the shipping carrier account details for the specified carrierCode. Use this method to determine a carrier's account balance.
        /// </remarks>
        /// <param name="carrierCode">The code for the carrier account to retrieve.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCarrierByCode> GetCarrierByCodeAsync(string carrierCode);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Carrier By Code
        /// </summary>
        /// <remarks>
        /// Retrieves the shipping carrier account details for the specified carrierCode. Use this method to determine a carrier's account balance.
        /// </remarks>
        /// <param name="carrierCode">The code for the carrier account to retrieve.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCarrierByCode> GetCarrierByCodeAsync(string carrierCode, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Carriers
        /// </summary>
        /// <remarks>
        /// List all shipping providers connected to this account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListCarrier>> ListCarriersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Carriers
        /// </summary>
        /// <remarks>
        /// List all shipping providers connected to this account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListCarrier>> ListCarriersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Packages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of packages for the specified carrier.
        /// </remarks>
        /// <param name="carrierCode">The carrier's code</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListPackage>> ListPackagesAsync(string carrierCode);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Packages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of packages for the specified carrier.
        /// </remarks>
        /// <param name="carrierCode">The carrier's code</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListPackage>> ListPackagesAsync(string carrierCode, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Services
        /// </summary>
        /// <remarks>
        /// Retrieves the list of available shipping services provided by the specified carrier.
        /// </remarks>
        /// <param name="carrierCode">The carrier's code</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListService>> ListServicesAsync(string carrierCode);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Services
        /// </summary>
        /// <remarks>
        /// Retrieves the list of available shipping services provided by the specified carrier.
        /// </remarks>
        /// <param name="carrierCode">The carrier's code</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListService>> ListServicesAsync(string carrierCode, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// Obtains a list of customers that match the specified criteria.
        /// </remarks>
        /// <param name="stateCode">Returns customers that reside in the specified stateCode.</param>
        /// <param name="countryCode">Returns customers that reside in the specified countryCode.</param>
        /// <param name="tagId">Returns customers that purchased items from the specified marketplaceId.</param>
        /// <param name="sortBy">Sorts the order of the response based off the specified value.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListCustomers> ListCustomersAsync(string stateCode, string countryCode, string tagId, string sortBy, string sortDir, string page, string pageSize);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// Obtains a list of customers that match the specified criteria.
        /// </remarks>
        /// <param name="stateCode">Returns customers that reside in the specified stateCode.</param>
        /// <param name="countryCode">Returns customers that reside in the specified countryCode.</param>
        /// <param name="tagId">Returns customers that purchased items from the specified marketplaceId.</param>
        /// <param name="sortBy">Sorts the order of the response based off the specified value.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListCustomers> ListCustomersAsync(string stateCode, string countryCode, string tagId, string sortBy, string sortDir, string page, string pageSize, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Get Customer with specific Id.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomer> GetCustomerAsync(string customerId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Get Customer with specific Id.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetCustomer> GetCustomerAsync(string customerId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Fulfillments
        /// </summary>
        /// <param name="fulfillmentId">Returns the fulfillment with the specified fulfillment ID.</param>
        /// <param name="orderId">Returns fulfillments whose orders have the specified order ID.</param>
        /// <param name="orderNumber">Returns fulfillments whose orders have the specified order number.</param>
        /// <param name="trackingNumber">Returns fulfillments with the specified tracking number.</param>
        /// <param name="recipientName">Returns fulfillments shipped to the specified recipient name.</param>
        /// <param name="createDateStart">Returns fulfillments created on or after the specified createDate.</param>
        /// <param name="createDateEnd">Returns fulfillments created on or before the specified createDate.</param>
        /// <param name="shipDateStart">Returns fulfillments with the shipDate on or after the specified date.</param>
        /// <param name="shipDateEnd">Returns fulfillments with the shipDate on or before the specified date.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current). If left empty, the response will be sorted by ascending createDate.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ListFulfillmentsAsync(string fulfillmentId, string orderId, string orderNumber, string trackingNumber, string recipientName, string createDateStart, string createDateEnd, string shipDateStart, string shipDateEnd, string sortBy, string sortDir, string page, string pageSize, string authorization);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Fulfillments
        /// </summary>
        /// <param name="fulfillmentId">Returns the fulfillment with the specified fulfillment ID.</param>
        /// <param name="orderId">Returns fulfillments whose orders have the specified order ID.</param>
        /// <param name="orderNumber">Returns fulfillments whose orders have the specified order number.</param>
        /// <param name="trackingNumber">Returns fulfillments with the specified tracking number.</param>
        /// <param name="recipientName">Returns fulfillments shipped to the specified recipient name.</param>
        /// <param name="createDateStart">Returns fulfillments created on or after the specified createDate.</param>
        /// <param name="createDateEnd">Returns fulfillments created on or before the specified createDate.</param>
        /// <param name="shipDateStart">Returns fulfillments with the shipDate on or after the specified date.</param>
        /// <param name="shipDateEnd">Returns fulfillments with the shipDate on or before the specified date.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current). If left empty, the response will be sorted by ascending createDate.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ListFulfillmentsAsync(string fulfillmentId, string orderId, string orderNumber, string trackingNumber, string recipientName, string createDateStart, string createDateEnd, string shipDateStart, string shipDateEnd, string sortBy, string sortDir, string page, string pageSize, string authorization, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create/Update Order
        /// </summary>
        /// <remarks>
        /// If the `orderKey` is specified, the method becomes idempotent and the existing order with that key will be updated. This call does not currently support partial updates; the entire resource must be provided in the body of the request. &lt;br&gt; &lt;br&gt;
        /// <br/>
        /// <br/>
        /// <br/>Note: Only orders in an open status in ShipStation (`awaiting_payment`,`awaiting_shipment`, and `on_hold`) can be updated through this method. `cancelled` and `shipped` are locked from modification through the API. The body of this request should specify an `Order` object:
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateUpdateOrder> Create_UpdateOrderAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create/Update Order
        /// </summary>
        /// <remarks>
        /// If the `orderKey` is specified, the method becomes idempotent and the existing order with that key will be updated. This call does not currently support partial updates; the entire resource must be provided in the body of the request. &lt;br&gt; &lt;br&gt;
        /// <br/>
        /// <br/>
        /// <br/>Note: Only orders in an open status in ShipStation (`awaiting_payment`,`awaiting_shipment`, and `on_hold`) can be updated through this method. `cancelled` and `shipped` are locked from modification through the API. The body of this request should specify an `Order` object:
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateUpdateOrder> Create_UpdateOrderAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create/Update Multiple Orders
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to create or update multiple orders in one request. If the orderKey is specified in an order, the existing order with that key will be updated. This call does not currently support partial updates; the entire resource must be provided in the body of the request. &lt;br/&gt;&lt;br/&gt;
        /// <br/>
        /// <br/>
        /// <br/>**NOTE:** You can only use this method to update orders in an open status in ShipStation (`awaiting_payment`,`awaiting_shipment`, and `on_hold`). Orders in cancelled and shipped statuse are locked from modification through the API.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateUpdateMultipleOrders> Create_UpdateMultipleOrdersAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create/Update Multiple Orders
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to create or update multiple orders in one request. If the orderKey is specified in an order, the existing order with that key will be updated. This call does not currently support partial updates; the entire resource must be provided in the body of the request. &lt;br/&gt;&lt;br/&gt;
        /// <br/>
        /// <br/>
        /// <br/>**NOTE:** You can only use this method to update orders in an open status in ShipStation (`awaiting_payment`,`awaiting_shipment`, and `on_hold`). Orders in cancelled and shipped statuse are locked from modification through the API.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateUpdateMultipleOrders> Create_UpdateMultipleOrdersAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Label for Order
        /// </summary>
        /// <remarks>
        /// Creates a shipping label for a given order. The `labelData` field returned in the response is a base64 encoded PDF value. Simply decode and save the output as a PDF file to retrieve a printable label. The body of this request should specify the following attributes:
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateLabelforOrderAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Label for Order
        /// </summary>
        /// <remarks>
        /// Creates a shipping label for a given order. The `labelData` field returned in the response is a base64 encoded PDF value. Simply decode and save the output as a PDF file to retrieve a printable label. The body of this request should specify the following attributes:
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateLabelforOrderAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Assign User To Order
        /// </summary>
        /// <remarks>
        /// Assigns a user to an order. The body of this request should specify the following attributes:
        /// <br/>
        /// <br/>
        /// <br/>- orderIds
        /// <br/>- userId
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AssignUserToOrderAsync(AssignUserToOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign User To Order
        /// </summary>
        /// <remarks>
        /// Assigns a user to an order. The body of this request should specify the following attributes:
        /// <br/>
        /// <br/>
        /// <br/>- orderIds
        /// <br/>- userId
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AssignUserToOrderAsync(AssignUserToOrderRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Tag To Order
        /// </summary>
        /// <remarks>
        /// Adds a tag to an order. The body of this request should specify the following attributes:
        /// <br/>
        /// <br/>
        /// <br/>- `orderId`
        /// <br/>- `tagId`
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddTagToOrder> AddTagToOrderAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Tag To Order
        /// </summary>
        /// <remarks>
        /// Adds a tag to an order. The body of this request should specify the following attributes:
        /// <br/>
        /// <br/>
        /// <br/>- `orderId`
        /// <br/>- `tagId`
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddTagToOrder> AddTagToOrderAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// Obtains a list of orders that match the specified criteria. &lt;br/&gt;
        /// <br/>All of the available filters are optional.
        /// </remarks>
        /// <param name="customerName">Returns orders that match the specified name.</param>
        /// <param name="itemKeyword">Returns orders that contain items that match the specified keyword. Fields searched are Sku, Description, and Options.</param>
        /// <param name="createDateStart">Returns orders that were created in ShipStation after the specified date.</param>
        /// <param name="createDateEnd">Returns orders that were created in ShipStation before the specified date.</param>
        /// <param name="modifyDateStart">Returns orders that were modified after the specified date.</param>
        /// <param name="modifyDateEnd">Returns orders that were modified before the specified date.</param>
        /// <param name="orderDateStart">Returns orders greater than the specified date.</param>
        /// <param name="orderDateEnd">Returns orders less than or equal to the specified date.</param>
        /// <param name="orderNumber">Filter by order number, performs a "starts with" search.</param>
        /// <param name="orderStatus">Filter by order status. If left empty, orders of all statuses are returned.</param>
        /// <param name="paymentDateStart">Returns orders that were paid after the specified date.</param>
        /// <param name="paymentDateEnd">Returns orders that were paid before the specified date.</param>
        /// <param name="storeId">Filters orders to a single store. Call List Stores to obtain a list of store Ids.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current.) If left empty, the response will be sorted by ascending orderId.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListOrders> ListOrdersAsync(string customerName, string itemKeyword, string createDateStart, string createDateEnd, string modifyDateStart, string modifyDateEnd, string orderDateStart, string orderDateEnd, string orderNumber, string orderStatus, string paymentDateStart, string paymentDateEnd, string storeId, string sortBy, string sortDir, string page, string pageSize, string authorization);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// Obtains a list of orders that match the specified criteria. &lt;br/&gt;
        /// <br/>All of the available filters are optional.
        /// </remarks>
        /// <param name="customerName">Returns orders that match the specified name.</param>
        /// <param name="itemKeyword">Returns orders that contain items that match the specified keyword. Fields searched are Sku, Description, and Options.</param>
        /// <param name="createDateStart">Returns orders that were created in ShipStation after the specified date.</param>
        /// <param name="createDateEnd">Returns orders that were created in ShipStation before the specified date.</param>
        /// <param name="modifyDateStart">Returns orders that were modified after the specified date.</param>
        /// <param name="modifyDateEnd">Returns orders that were modified before the specified date.</param>
        /// <param name="orderDateStart">Returns orders greater than the specified date.</param>
        /// <param name="orderDateEnd">Returns orders less than or equal to the specified date.</param>
        /// <param name="orderNumber">Filter by order number, performs a "starts with" search.</param>
        /// <param name="orderStatus">Filter by order status. If left empty, orders of all statuses are returned.</param>
        /// <param name="paymentDateStart">Returns orders that were paid after the specified date.</param>
        /// <param name="paymentDateEnd">Returns orders that were paid before the specified date.</param>
        /// <param name="storeId">Filters orders to a single store. Call List Stores to obtain a list of store Ids.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current.) If left empty, the response will be sorted by ascending orderId.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListOrders> ListOrdersAsync(string customerName, string itemKeyword, string createDateStart, string createDateEnd, string modifyDateStart, string modifyDateEnd, string orderDateStart, string orderDateEnd, string orderNumber, string orderStatus, string paymentDateStart, string paymentDateEnd, string storeId, string sortBy, string sortDir, string page, string pageSize, string authorization, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Orders By Tag
        /// </summary>
        /// <remarks>
        /// ists all orders that match the specified status and tag ID.
        /// </remarks>
        /// <param name="orderStatus">The order's status.</param>
        /// <param name="tagId">ID of the tag. Call Accounts/ListTags to obtain a list of tags for this account.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ListOrdersByTagAsync(string orderStatus, string tagId, string page, string pageSize);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Orders By Tag
        /// </summary>
        /// <remarks>
        /// ists all orders that match the specified status and tag ID.
        /// </remarks>
        /// <param name="orderStatus">The order's status.</param>
        /// <param name="tagId">ID of the tag. Call Accounts/ListTags to obtain a list of tags for this account.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ListOrdersByTagAsync(string orderStatus, string tagId, string page, string pageSize, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Retrieve a single order from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOrder> GetOrderAsync(string orderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Retrieve a single order from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetOrder> GetOrderAsync(string orderId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Order
        /// </summary>
        /// <remarks>
        /// Removes order from ShipStation's UI. Note this is a "soft" delete action so the order will still exist in the database, but will be set to inactive.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteOrder> DeleteOrderAsync(string orderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Order
        /// </summary>
        /// <remarks>
        /// Removes order from ShipStation's UI. Note this is a "soft" delete action so the order will still exist in the database, but will be set to inactive.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteOrder> DeleteOrderAsync(string orderId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Hold Order Until
        /// </summary>
        /// <remarks>
        /// This method will change the status of the given order to On Hold until the date specified, when the status will automatically change to Awaiting Shipment.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HoldOrderUntil> HoldOrderUntilAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hold Order Until
        /// </summary>
        /// <remarks>
        /// This method will change the status of the given order to On Hold until the date specified, when the status will automatically change to Awaiting Shipment.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HoldOrderUntil> HoldOrderUntilAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mark an Order as Shipped
        /// </summary>
        /// <remarks>
        /// Marks an order as shipped without creating a label in ShipStation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarkanOrderasShipped> MarkanOrderasShippedAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark an Order as Shipped
        /// </summary>
        /// <remarks>
        /// Marks an order as shipped without creating a label in ShipStation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarkanOrderasShipped> MarkanOrderasShippedAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Tag from Order
        /// </summary>
        /// <remarks>
        /// Removes a tag from the specified order.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RemoveTagfromOrder> RemoveTagfromOrderAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Tag from Order
        /// </summary>
        /// <remarks>
        /// Removes a tag from the specified order.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RemoveTagfromOrder> RemoveTagfromOrderAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Restore Order from On Hold
        /// </summary>
        /// <remarks>
        /// This method will change the status of the given order from On Hold to Awaiting Shipment. This endpoint is used when a holdUntil Date is attached to an order.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestoreOrderfromOnHold> RestoreOrderfromOnHoldAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore Order from On Hold
        /// </summary>
        /// <remarks>
        /// This method will change the status of the given order from On Hold to Awaiting Shipment. This endpoint is used when a holdUntil Date is attached to an order.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestoreOrderfromOnHold> RestoreOrderfromOnHoldAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unassign User from Order
        /// </summary>
        /// <remarks>
        /// Unassigns a user from an order.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnassignUserfromOrderAsync(UnassignUserfromOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign User from Order
        /// </summary>
        /// <remarks>
        /// Unassigns a user from an order.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnassignUserfromOrderAsync(UnassignUserfromOrderRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a Product
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetaProduct> GetaProductAsync(string productId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a Product
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetaProduct> GetaProductAsync(string productId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates an existing product. This call does not currently support partial updates. The entire resource must be provided in the body of the request.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateaProduct> UpdateaProductAsync(string productId, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates an existing product. This call does not currently support partial updates. The entire resource must be provided in the body of the request.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateaProduct> UpdateaProductAsync(string productId, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Obtains a list of products that match the specified criteria. All of the available filters are optional. They do not need to be included in the URL.
        /// </remarks>
        /// <param name="sku">Returns products that match the specified SKU.</param>
        /// <param name="name">Returns products that match the specified product name.</param>
        /// <param name="productCategoryId">Returns products that match the specified productCategoryId.</param>
        /// <param name="productTypeId">Returns products that match the specified productTypeId.</param>
        /// <param name="tagId">Returns products that match the specified tagId.</param>
        /// <param name="startDate">Returns products that were created after the specified date.</param>
        /// <param name="endDate">Returns products that were created before the specified date.</param>
        /// <param name="showInactive">Specifies whether the list should include inactive products.</param>
        /// <param name="sortBy">Sorts the order of the response based off the specified value.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListProducts> ListProductsAsync(string sku, string name, string productCategoryId, string productTypeId, string tagId, string startDate, string endDate, string showInactive, string sortBy, string sortDir, string page, string pageSize);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Obtains a list of products that match the specified criteria. All of the available filters are optional. They do not need to be included in the URL.
        /// </remarks>
        /// <param name="sku">Returns products that match the specified SKU.</param>
        /// <param name="name">Returns products that match the specified product name.</param>
        /// <param name="productCategoryId">Returns products that match the specified productCategoryId.</param>
        /// <param name="productTypeId">Returns products that match the specified productTypeId.</param>
        /// <param name="tagId">Returns products that match the specified tagId.</param>
        /// <param name="startDate">Returns products that were created after the specified date.</param>
        /// <param name="endDate">Returns products that were created before the specified date.</param>
        /// <param name="showInactive">Specifies whether the list should include inactive products.</param>
        /// <param name="sortBy">Sorts the order of the response based off the specified value.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListProducts> ListProductsAsync(string sku, string name, string productCategoryId, string productTypeId, string tagId, string startDate, string endDate, string showInactive, string sortBy, string sortDir, string page, string pageSize, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Shipment Label
        /// </summary>
        /// <remarks>
        /// Creates a shipping label. The `labelData` field returned in the response is a base64 encoded PDF value. Simply decode and save the output as a PDF file to retrieve a printable label.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateShipmentLabelAsync(CreateShipmentLabelRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Shipment Label
        /// </summary>
        /// <remarks>
        /// Creates a shipping label. The `labelData` field returned in the response is a base64 encoded PDF value. Simply decode and save the output as a PDF file to retrieve a printable label.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateShipmentLabelAsync(CreateShipmentLabelRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Rates
        /// </summary>
        /// <remarks>
        /// Retrieves shipping rates for the specified shipping details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetRate>> GetRatesAsync(GetRatesRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Rates
        /// </summary>
        /// <remarks>
        /// Retrieves shipping rates for the specified shipping details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetRate>> GetRatesAsync(GetRatesRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Shipments
        /// </summary>
        /// <remarks>
        /// Obtains a list of shipments that match the specified criteria.
        /// </remarks>
        /// <param name="recipientName">Returns shipments shipped to the specified recipient name.</param>
        /// <param name="recipientCountryCode">Returns shipments shipped to the specified country code.</param>
        /// <param name="orderNumber">Returns shipments whose orders have the specified order number.</param>
        /// <param name="orderId">Returns shipments whose orders have the specified order ID.</param>
        /// <param name="carrierCode">Returns shipments shipped with the specified carrier.</param>
        /// <param name="serviceCode">Returns shipments shipped with the specified shipping service.</param>
        /// <param name="trackingNumber">Returns shipments with the specified tracking number.</param>
        /// <param name="createDateStart">Returns shipments created on or after the specified createDate.</param>
        /// <param name="createDateEnd">Returns shipments created on or before the specified createDate.</param>
        /// <param name="shipDateStart">Returns shipments with the shipDate on or after the specified date.</param>
        /// <param name="shipDateEnd">Returns shipments with the shipDate on or before the specified date.</param>
        /// <param name="voidDateStart">Returns shipments voided on or after the specified date.</param>
        /// <param name="voidDateEnd">Returns shipments voided on or before the specified date.</param>
        /// <param name="storeId">Returns shipments whose orders belong to the specified store ID.</param>
        /// <param name="includeShipmentItems">Specifies whether to include shipment items with results Default value: false.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current.) If left empty, the response will be sorted by ascending createDate.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ListShipmentsAsync(string recipientName, string recipientCountryCode, string orderNumber, string orderId, string carrierCode, string serviceCode, string trackingNumber, string createDateStart, string createDateEnd, string shipDateStart, string shipDateEnd, string voidDateStart, string voidDateEnd, string storeId, string includeShipmentItems, string sortBy, string sortDir, string page, string pageSize);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Shipments
        /// </summary>
        /// <remarks>
        /// Obtains a list of shipments that match the specified criteria.
        /// </remarks>
        /// <param name="recipientName">Returns shipments shipped to the specified recipient name.</param>
        /// <param name="recipientCountryCode">Returns shipments shipped to the specified country code.</param>
        /// <param name="orderNumber">Returns shipments whose orders have the specified order number.</param>
        /// <param name="orderId">Returns shipments whose orders have the specified order ID.</param>
        /// <param name="carrierCode">Returns shipments shipped with the specified carrier.</param>
        /// <param name="serviceCode">Returns shipments shipped with the specified shipping service.</param>
        /// <param name="trackingNumber">Returns shipments with the specified tracking number.</param>
        /// <param name="createDateStart">Returns shipments created on or after the specified createDate.</param>
        /// <param name="createDateEnd">Returns shipments created on or before the specified createDate.</param>
        /// <param name="shipDateStart">Returns shipments with the shipDate on or after the specified date.</param>
        /// <param name="shipDateEnd">Returns shipments with the shipDate on or before the specified date.</param>
        /// <param name="voidDateStart">Returns shipments voided on or after the specified date.</param>
        /// <param name="voidDateEnd">Returns shipments voided on or before the specified date.</param>
        /// <param name="storeId">Returns shipments whose orders belong to the specified store ID.</param>
        /// <param name="includeShipmentItems">Specifies whether to include shipment items with results Default value: false.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current.) If left empty, the response will be sorted by ascending createDate.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ListShipmentsAsync(string recipientName, string recipientCountryCode, string orderNumber, string orderId, string carrierCode, string serviceCode, string trackingNumber, string createDateStart, string createDateEnd, string shipDateStart, string shipDateEnd, string voidDateStart, string voidDateEnd, string storeId, string includeShipmentItems, string sortBy, string sortDir, string page, string pageSize, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Void Shipment Label
        /// </summary>
        /// <remarks>
        /// Voids the specified label by shipmentId.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VoidShipmentLabelAsync(VoidShipmentLabelRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Void Shipment Label
        /// </summary>
        /// <remarks>
        /// Voids the specified label by shipmentId.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VoidShipmentLabelAsync(VoidShipmentLabelRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Stores
        /// </summary>
        /// <remarks>
        /// Retrieve the list of installed stores on the account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListStore>> ListStoresAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Stores
        /// </summary>
        /// <remarks>
        /// Retrieve the list of installed stores on the account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListStore>> ListStoresAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Store
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStore> GetStoreAsync(string storeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Store
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetStore> GetStoreAsync(string storeId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update Store
        /// </summary>
        /// <remarks>
        /// Updates an existing store.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateStoreAsync(string storeId, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Store
        /// </summary>
        /// <remarks>
        /// Updates an existing store.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateStoreAsync(string storeId, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deactivate Store
        /// </summary>
        /// <remarks>
        /// Deactivates the specified store.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeactivateStore> DeactivateStoreAsync(DeactivateStoreRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deactivate Store
        /// </summary>
        /// <remarks>
        /// Deactivates the specified store.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeactivateStore> DeactivateStoreAsync(DeactivateStoreRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reactivate Store
        /// </summary>
        /// <remarks>
        /// Reactivates the specified store.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReactivateStore> ReactivateStoreAsync(ReactivateStoreRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reactivate Store
        /// </summary>
        /// <remarks>
        /// Reactivates the specified store.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReactivateStore> ReactivateStoreAsync(ReactivateStoreRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Marketplaces
        /// </summary>
        /// <remarks>
        /// Lists the marketplaces that can be integrated with ShipStation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListMarketplace>> ListMarketplacesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Marketplaces
        /// </summary>
        /// <remarks>
        /// Lists the marketplaces that can be integrated with ShipStation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListMarketplace>> ListMarketplacesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Refresh Store
        /// </summary>
        /// <remarks>
        /// Initiates a store refresh.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RefreshStoreAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refresh Store
        /// </summary>
        /// <remarks>
        /// Initiates a store refresh.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RefreshStoreAsync(string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Store Refresh status
        /// </summary>
        /// <remarks>
        /// Retrieves the refresh status of a given store.
        /// </remarks>
        /// <param name="storeId">Specifies the store whose status will be retrieved.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetStoreRefreshstatusAsync(string storeId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Store Refresh status
        /// </summary>
        /// <remarks>
        /// Retrieves the refresh status of a given store.
        /// </remarks>
        /// <param name="storeId">Specifies the store whose status will be retrieved.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetStoreRefreshstatusAsync(string storeId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Users
        /// </summary>
        /// <param name="showInactive">Determines whether inactive users will be returned in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListUser>> ListUsersAsync(bool showInactive);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Users
        /// </summary>
        /// <param name="showInactive">Determines whether inactive users will be returned in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListUser>> ListUsersAsync(bool showInactive, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Warehouse
        /// </summary>
        /// <remarks>
        /// Adds a Ship From Location (formerly known as warehouse) to your account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateWarehouse> CreateWarehouseAsync(CreateWarehouseRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Warehouse
        /// </summary>
        /// <remarks>
        /// Adds a Ship From Location (formerly known as warehouse) to your account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateWarehouse> CreateWarehouseAsync(CreateWarehouseRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Warehouses
        /// </summary>
        /// <remarks>
        /// Retrieves a list of your Ship From Locations (formerly known as warehouses).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListWarehouse>> ListWarehousesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Warehouses
        /// </summary>
        /// <remarks>
        /// Retrieves a list of your Ship From Locations (formerly known as warehouses).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListWarehouse>> ListWarehousesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Warehouse
        /// </summary>
        /// <remarks>
        /// Returns a list of active Ship From Locations (formerly known as warehouses) on the ShipStation account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWarehouse> GetWarehouseAsync(string warehouseId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Warehouse
        /// </summary>
        /// <remarks>
        /// Returns a list of active Ship From Locations (formerly known as warehouses) on the ShipStation account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWarehouse> GetWarehouseAsync(string warehouseId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update Warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing Ship From Location (formerly known as warehouse). &lt;br/&gt;&lt;br/&gt;
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/> If a "returnAddress" object is not specified, your "originAddress" will be used as your "returnAddress".
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateWarehouse> UpdateWarehouseAsync(string warehouseId, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing Ship From Location (formerly known as warehouse). &lt;br/&gt;&lt;br/&gt;
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/> If a "returnAddress" object is not specified, your "originAddress" will be used as your "returnAddress".
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateWarehouse> UpdateWarehouseAsync(string warehouseId, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a warehouse
        /// </summary>
        /// <remarks>
        /// Removes a warehouse from ShipStation's UI.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deleteawarehouse> DeleteawarehouseAsync(string warehouseId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a warehouse
        /// </summary>
        /// <remarks>
        /// Removes a warehouse from ShipStation's UI.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Deleteawarehouse> DeleteawarehouseAsync(string warehouseId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieves a list of registered webhooks for the account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListWebhooks> ListWebhooksAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieves a list of registered webhooks for the account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListWebhooks> ListWebhooksAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Subscribe to Webhook
        /// </summary>
        /// <remarks>
        /// Subscribes to a specific type of webhook. If a `store_id` is passed in, the webhooks will only be triggered for that specific `store_id`. The `event` type that is passed in will determine what type of webhooks will be sent.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscribetoWebhook> SubscribetoWebhookAsync(SubscribetoWebhookRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Subscribe to Webhook
        /// </summary>
        /// <remarks>
        /// Subscribes to a specific type of webhook. If a `store_id` is passed in, the webhooks will only be triggered for that specific `store_id`. The `event` type that is passed in will determine what type of webhooks will be sent.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscribetoWebhook> SubscribetoWebhookAsync(SubscribetoWebhookRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Unsubscribe to Webhook
        /// </summary>
        /// <remarks>
        /// Unsubscribes from a certain webhook.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnsubscribetoWebhookAsync(string webhookId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unsubscribe to Webhook
        /// </summary>
        /// <remarks>
        /// Unsubscribes from a certain webhook.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UnsubscribetoWebhookAsync(string webhookId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipStationClient : IShipStationClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ShipStationClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Add funds to carrier account
        /// </summary>
        /// <remarks>
        /// Adds funds to a carrier account using the payment information on file. &lt;br&gt; 
        /// <br/>Requires approval from apisupport@shipstation.com before use.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddfundstocarrieraccountAsync(AddfundstocarrieraccountRequest body)
        {
            return AddfundstocarrieraccountAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add funds to carrier account
        /// </summary>
        /// <remarks>
        /// Adds funds to a carrier account using the payment information on file. &lt;br&gt; 
        /// <br/>Requires approval from apisupport@shipstation.com before use.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddfundstocarrieraccountAsync(AddfundstocarrieraccountRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "carriers/addfunds"
                    urlBuilder_.Append("carriers/addfunds");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Carrier By Code
        /// </summary>
        /// <remarks>
        /// Retrieves the shipping carrier account details for the specified carrierCode. Use this method to determine a carrier's account balance.
        /// </remarks>
        /// <param name="carrierCode">The code for the carrier account to retrieve.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetCarrierByCode> GetCarrierByCodeAsync(string carrierCode)
        {
            return GetCarrierByCodeAsync(carrierCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Carrier By Code
        /// </summary>
        /// <remarks>
        /// Retrieves the shipping carrier account details for the specified carrierCode. Use this method to determine a carrier's account balance.
        /// </remarks>
        /// <param name="carrierCode">The code for the carrier account to retrieve.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetCarrierByCode> GetCarrierByCodeAsync(string carrierCode, System.Threading.CancellationToken cancellationToken)
        {
            if (carrierCode == null)
                throw new System.ArgumentNullException("carrierCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "carriers/getcarrier"
                    urlBuilder_.Append("carriers/getcarrier");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("carrierCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carrierCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCarrierByCode>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Carriers
        /// </summary>
        /// <remarks>
        /// List all shipping providers connected to this account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListCarrier>> ListCarriersAsync()
        {
            return ListCarriersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Carriers
        /// </summary>
        /// <remarks>
        /// List all shipping providers connected to this account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListCarrier>> ListCarriersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "carriers"
                    urlBuilder_.Append("carriers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ListCarrier>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Packages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of packages for the specified carrier.
        /// </remarks>
        /// <param name="carrierCode">The carrier's code</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListPackage>> ListPackagesAsync(string carrierCode)
        {
            return ListPackagesAsync(carrierCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Packages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of packages for the specified carrier.
        /// </remarks>
        /// <param name="carrierCode">The carrier's code</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListPackage>> ListPackagesAsync(string carrierCode, System.Threading.CancellationToken cancellationToken)
        {
            if (carrierCode == null)
                throw new System.ArgumentNullException("carrierCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "carriers/listpackages"
                    urlBuilder_.Append("carriers/listpackages");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("carrierCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carrierCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ListPackage>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Services
        /// </summary>
        /// <remarks>
        /// Retrieves the list of available shipping services provided by the specified carrier.
        /// </remarks>
        /// <param name="carrierCode">The carrier's code</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListService>> ListServicesAsync(string carrierCode)
        {
            return ListServicesAsync(carrierCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Services
        /// </summary>
        /// <remarks>
        /// Retrieves the list of available shipping services provided by the specified carrier.
        /// </remarks>
        /// <param name="carrierCode">The carrier's code</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListService>> ListServicesAsync(string carrierCode, System.Threading.CancellationToken cancellationToken)
        {
            if (carrierCode == null)
                throw new System.ArgumentNullException("carrierCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "carriers/listservices"
                    urlBuilder_.Append("carriers/listservices");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("carrierCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carrierCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ListService>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// Obtains a list of customers that match the specified criteria.
        /// </remarks>
        /// <param name="stateCode">Returns customers that reside in the specified stateCode.</param>
        /// <param name="countryCode">Returns customers that reside in the specified countryCode.</param>
        /// <param name="tagId">Returns customers that purchased items from the specified marketplaceId.</param>
        /// <param name="sortBy">Sorts the order of the response based off the specified value.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ListCustomers> ListCustomersAsync(string stateCode, string countryCode, string tagId, string sortBy, string sortDir, string page, string pageSize)
        {
            return ListCustomersAsync(stateCode, countryCode, tagId, sortBy, sortDir, page, pageSize, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// Obtains a list of customers that match the specified criteria.
        /// </remarks>
        /// <param name="stateCode">Returns customers that reside in the specified stateCode.</param>
        /// <param name="countryCode">Returns customers that reside in the specified countryCode.</param>
        /// <param name="tagId">Returns customers that purchased items from the specified marketplaceId.</param>
        /// <param name="sortBy">Sorts the order of the response based off the specified value.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListCustomers> ListCustomersAsync(string stateCode, string countryCode, string tagId, string sortBy, string sortDir, string page, string pageSize, System.Threading.CancellationToken cancellationToken)
        {
            if (stateCode == null)
                throw new System.ArgumentNullException("stateCode");

            if (countryCode == null)
                throw new System.ArgumentNullException("countryCode");

            if (tagId == null)
                throw new System.ArgumentNullException("tagId");

            if (sortBy == null)
                throw new System.ArgumentNullException("sortBy");

            if (sortDir == null)
                throw new System.ArgumentNullException("sortDir");

            if (page == null)
                throw new System.ArgumentNullException("page");

            if (pageSize == null)
                throw new System.ArgumentNullException("pageSize");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "customers"
                    urlBuilder_.Append("customers");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("stateCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(stateCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("countryCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(countryCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tagId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tagId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortDir")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDir, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListCustomers>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Get Customer with specific Id.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetCustomer> GetCustomerAsync(string customerId)
        {
            return GetCustomerAsync(customerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Get Customer with specific Id.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetCustomer> GetCustomerAsync(string customerId, System.Threading.CancellationToken cancellationToken)
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "customers/{customerId}"
                    urlBuilder_.Append("customers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetCustomer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Fulfillments
        /// </summary>
        /// <param name="fulfillmentId">Returns the fulfillment with the specified fulfillment ID.</param>
        /// <param name="orderId">Returns fulfillments whose orders have the specified order ID.</param>
        /// <param name="orderNumber">Returns fulfillments whose orders have the specified order number.</param>
        /// <param name="trackingNumber">Returns fulfillments with the specified tracking number.</param>
        /// <param name="recipientName">Returns fulfillments shipped to the specified recipient name.</param>
        /// <param name="createDateStart">Returns fulfillments created on or after the specified createDate.</param>
        /// <param name="createDateEnd">Returns fulfillments created on or before the specified createDate.</param>
        /// <param name="shipDateStart">Returns fulfillments with the shipDate on or after the specified date.</param>
        /// <param name="shipDateEnd">Returns fulfillments with the shipDate on or before the specified date.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current). If left empty, the response will be sorted by ascending createDate.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ListFulfillmentsAsync(string fulfillmentId, string orderId, string orderNumber, string trackingNumber, string recipientName, string createDateStart, string createDateEnd, string shipDateStart, string shipDateEnd, string sortBy, string sortDir, string page, string pageSize, string authorization)
        {
            return ListFulfillmentsAsync(fulfillmentId, orderId, orderNumber, trackingNumber, recipientName, createDateStart, createDateEnd, shipDateStart, shipDateEnd, sortBy, sortDir, page, pageSize, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Fulfillments
        /// </summary>
        /// <param name="fulfillmentId">Returns the fulfillment with the specified fulfillment ID.</param>
        /// <param name="orderId">Returns fulfillments whose orders have the specified order ID.</param>
        /// <param name="orderNumber">Returns fulfillments whose orders have the specified order number.</param>
        /// <param name="trackingNumber">Returns fulfillments with the specified tracking number.</param>
        /// <param name="recipientName">Returns fulfillments shipped to the specified recipient name.</param>
        /// <param name="createDateStart">Returns fulfillments created on or after the specified createDate.</param>
        /// <param name="createDateEnd">Returns fulfillments created on or before the specified createDate.</param>
        /// <param name="shipDateStart">Returns fulfillments with the shipDate on or after the specified date.</param>
        /// <param name="shipDateEnd">Returns fulfillments with the shipDate on or before the specified date.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current). If left empty, the response will be sorted by ascending createDate.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ListFulfillmentsAsync(string fulfillmentId, string orderId, string orderNumber, string trackingNumber, string recipientName, string createDateStart, string createDateEnd, string shipDateStart, string shipDateEnd, string sortBy, string sortDir, string page, string pageSize, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            if (fulfillmentId == null)
                throw new System.ArgumentNullException("fulfillmentId");

            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");

            if (trackingNumber == null)
                throw new System.ArgumentNullException("trackingNumber");

            if (recipientName == null)
                throw new System.ArgumentNullException("recipientName");

            if (createDateStart == null)
                throw new System.ArgumentNullException("createDateStart");

            if (createDateEnd == null)
                throw new System.ArgumentNullException("createDateEnd");

            if (shipDateStart == null)
                throw new System.ArgumentNullException("shipDateStart");

            if (shipDateEnd == null)
                throw new System.ArgumentNullException("shipDateEnd");

            if (sortBy == null)
                throw new System.ArgumentNullException("sortBy");

            if (sortDir == null)
                throw new System.ArgumentNullException("sortDir");

            if (page == null)
                throw new System.ArgumentNullException("page");

            if (pageSize == null)
                throw new System.ArgumentNullException("pageSize");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "fulfillments"
                    urlBuilder_.Append("fulfillments");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fulfillmentId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fulfillmentId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("trackingNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(trackingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("recipientName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(recipientName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("createDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("createDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("shipDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("shipDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortDir")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDir, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create/Update Order
        /// </summary>
        /// <remarks>
        /// If the `orderKey` is specified, the method becomes idempotent and the existing order with that key will be updated. This call does not currently support partial updates; the entire resource must be provided in the body of the request. &lt;br&gt; &lt;br&gt;
        /// <br/>
        /// <br/>
        /// <br/>Note: Only orders in an open status in ShipStation (`awaiting_payment`,`awaiting_shipment`, and `on_hold`) can be updated through this method. `cancelled` and `shipped` are locked from modification through the API. The body of this request should specify an `Order` object:
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateUpdateOrder> Create_UpdateOrderAsync(string body)
        {
            return Create_UpdateOrderAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create/Update Order
        /// </summary>
        /// <remarks>
        /// If the `orderKey` is specified, the method becomes idempotent and the existing order with that key will be updated. This call does not currently support partial updates; the entire resource must be provided in the body of the request. &lt;br&gt; &lt;br&gt;
        /// <br/>
        /// <br/>
        /// <br/>Note: Only orders in an open status in ShipStation (`awaiting_payment`,`awaiting_shipment`, and `on_hold`) can be updated through this method. `cancelled` and `shipped` are locked from modification through the API. The body of this request should specify an `Order` object:
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateUpdateOrder> Create_UpdateOrderAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/createorder"
                    urlBuilder_.Append("orders/createorder");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateUpdateOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create/Update Multiple Orders
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to create or update multiple orders in one request. If the orderKey is specified in an order, the existing order with that key will be updated. This call does not currently support partial updates; the entire resource must be provided in the body of the request. &lt;br/&gt;&lt;br/&gt;
        /// <br/>
        /// <br/>
        /// <br/>**NOTE:** You can only use this method to update orders in an open status in ShipStation (`awaiting_payment`,`awaiting_shipment`, and `on_hold`). Orders in cancelled and shipped statuse are locked from modification through the API.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateUpdateMultipleOrders> Create_UpdateMultipleOrdersAsync(string body)
        {
            return Create_UpdateMultipleOrdersAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create/Update Multiple Orders
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to create or update multiple orders in one request. If the orderKey is specified in an order, the existing order with that key will be updated. This call does not currently support partial updates; the entire resource must be provided in the body of the request. &lt;br/&gt;&lt;br/&gt;
        /// <br/>
        /// <br/>
        /// <br/>**NOTE:** You can only use this method to update orders in an open status in ShipStation (`awaiting_payment`,`awaiting_shipment`, and `on_hold`). Orders in cancelled and shipped statuse are locked from modification through the API.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateUpdateMultipleOrders> Create_UpdateMultipleOrdersAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/createorders"
                    urlBuilder_.Append("orders/createorders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateUpdateMultipleOrders>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Label for Order
        /// </summary>
        /// <remarks>
        /// Creates a shipping label for a given order. The `labelData` field returned in the response is a base64 encoded PDF value. Simply decode and save the output as a PDF file to retrieve a printable label. The body of this request should specify the following attributes:
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateLabelforOrderAsync(string body)
        {
            return CreateLabelforOrderAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Label for Order
        /// </summary>
        /// <remarks>
        /// Creates a shipping label for a given order. The `labelData` field returned in the response is a base64 encoded PDF value. Simply decode and save the output as a PDF file to retrieve a printable label. The body of this request should specify the following attributes:
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateLabelforOrderAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/createlabelfororder"
                    urlBuilder_.Append("orders/createlabelfororder");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign User To Order
        /// </summary>
        /// <remarks>
        /// Assigns a user to an order. The body of this request should specify the following attributes:
        /// <br/>
        /// <br/>
        /// <br/>- orderIds
        /// <br/>- userId
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AssignUserToOrderAsync(AssignUserToOrderRequest body)
        {
            return AssignUserToOrderAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign User To Order
        /// </summary>
        /// <remarks>
        /// Assigns a user to an order. The body of this request should specify the following attributes:
        /// <br/>
        /// <br/>
        /// <br/>- orderIds
        /// <br/>- userId
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AssignUserToOrderAsync(AssignUserToOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/assignuser"
                    urlBuilder_.Append("orders/assignuser");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add Tag To Order
        /// </summary>
        /// <remarks>
        /// Adds a tag to an order. The body of this request should specify the following attributes:
        /// <br/>
        /// <br/>
        /// <br/>- `orderId`
        /// <br/>- `tagId`
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddTagToOrder> AddTagToOrderAsync(string body)
        {
            return AddTagToOrderAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Tag To Order
        /// </summary>
        /// <remarks>
        /// Adds a tag to an order. The body of this request should specify the following attributes:
        /// <br/>
        /// <br/>
        /// <br/>- `orderId`
        /// <br/>- `tagId`
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddTagToOrder> AddTagToOrderAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/addtag"
                    urlBuilder_.Append("orders/addtag");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddTagToOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// Obtains a list of orders that match the specified criteria. &lt;br/&gt;
        /// <br/>All of the available filters are optional.
        /// </remarks>
        /// <param name="customerName">Returns orders that match the specified name.</param>
        /// <param name="itemKeyword">Returns orders that contain items that match the specified keyword. Fields searched are Sku, Description, and Options.</param>
        /// <param name="createDateStart">Returns orders that were created in ShipStation after the specified date.</param>
        /// <param name="createDateEnd">Returns orders that were created in ShipStation before the specified date.</param>
        /// <param name="modifyDateStart">Returns orders that were modified after the specified date.</param>
        /// <param name="modifyDateEnd">Returns orders that were modified before the specified date.</param>
        /// <param name="orderDateStart">Returns orders greater than the specified date.</param>
        /// <param name="orderDateEnd">Returns orders less than or equal to the specified date.</param>
        /// <param name="orderNumber">Filter by order number, performs a "starts with" search.</param>
        /// <param name="orderStatus">Filter by order status. If left empty, orders of all statuses are returned.</param>
        /// <param name="paymentDateStart">Returns orders that were paid after the specified date.</param>
        /// <param name="paymentDateEnd">Returns orders that were paid before the specified date.</param>
        /// <param name="storeId">Filters orders to a single store. Call List Stores to obtain a list of store Ids.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current.) If left empty, the response will be sorted by ascending orderId.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ListOrders> ListOrdersAsync(string customerName, string itemKeyword, string createDateStart, string createDateEnd, string modifyDateStart, string modifyDateEnd, string orderDateStart, string orderDateEnd, string orderNumber, string orderStatus, string paymentDateStart, string paymentDateEnd, string storeId, string sortBy, string sortDir, string page, string pageSize, string authorization)
        {
            return ListOrdersAsync(customerName, itemKeyword, createDateStart, createDateEnd, modifyDateStart, modifyDateEnd, orderDateStart, orderDateEnd, orderNumber, orderStatus, paymentDateStart, paymentDateEnd, storeId, sortBy, sortDir, page, pageSize, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Orders
        /// </summary>
        /// <remarks>
        /// Obtains a list of orders that match the specified criteria. &lt;br/&gt;
        /// <br/>All of the available filters are optional.
        /// </remarks>
        /// <param name="customerName">Returns orders that match the specified name.</param>
        /// <param name="itemKeyword">Returns orders that contain items that match the specified keyword. Fields searched are Sku, Description, and Options.</param>
        /// <param name="createDateStart">Returns orders that were created in ShipStation after the specified date.</param>
        /// <param name="createDateEnd">Returns orders that were created in ShipStation before the specified date.</param>
        /// <param name="modifyDateStart">Returns orders that were modified after the specified date.</param>
        /// <param name="modifyDateEnd">Returns orders that were modified before the specified date.</param>
        /// <param name="orderDateStart">Returns orders greater than the specified date.</param>
        /// <param name="orderDateEnd">Returns orders less than or equal to the specified date.</param>
        /// <param name="orderNumber">Filter by order number, performs a "starts with" search.</param>
        /// <param name="orderStatus">Filter by order status. If left empty, orders of all statuses are returned.</param>
        /// <param name="paymentDateStart">Returns orders that were paid after the specified date.</param>
        /// <param name="paymentDateEnd">Returns orders that were paid before the specified date.</param>
        /// <param name="storeId">Filters orders to a single store. Call List Stores to obtain a list of store Ids.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current.) If left empty, the response will be sorted by ascending orderId.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListOrders> ListOrdersAsync(string customerName, string itemKeyword, string createDateStart, string createDateEnd, string modifyDateStart, string modifyDateEnd, string orderDateStart, string orderDateEnd, string orderNumber, string orderStatus, string paymentDateStart, string paymentDateEnd, string storeId, string sortBy, string sortDir, string page, string pageSize, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            if (customerName == null)
                throw new System.ArgumentNullException("customerName");

            if (itemKeyword == null)
                throw new System.ArgumentNullException("itemKeyword");

            if (createDateStart == null)
                throw new System.ArgumentNullException("createDateStart");

            if (createDateEnd == null)
                throw new System.ArgumentNullException("createDateEnd");

            if (modifyDateStart == null)
                throw new System.ArgumentNullException("modifyDateStart");

            if (modifyDateEnd == null)
                throw new System.ArgumentNullException("modifyDateEnd");

            if (orderDateStart == null)
                throw new System.ArgumentNullException("orderDateStart");

            if (orderDateEnd == null)
                throw new System.ArgumentNullException("orderDateEnd");

            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");

            if (orderStatus == null)
                throw new System.ArgumentNullException("orderStatus");

            if (paymentDateStart == null)
                throw new System.ArgumentNullException("paymentDateStart");

            if (paymentDateEnd == null)
                throw new System.ArgumentNullException("paymentDateEnd");

            if (storeId == null)
                throw new System.ArgumentNullException("storeId");

            if (sortBy == null)
                throw new System.ArgumentNullException("sortBy");

            if (sortDir == null)
                throw new System.ArgumentNullException("sortDir");

            if (page == null)
                throw new System.ArgumentNullException("page");

            if (pageSize == null)
                throw new System.ArgumentNullException("pageSize");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders"
                    urlBuilder_.Append("orders");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("customerName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("itemKeyword")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(itemKeyword, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("createDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("createDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("modifyDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(modifyDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("modifyDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(modifyDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("paymentDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paymentDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("paymentDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paymentDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("storeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortDir")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDir, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListOrders>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Orders By Tag
        /// </summary>
        /// <remarks>
        /// ists all orders that match the specified status and tag ID.
        /// </remarks>
        /// <param name="orderStatus">The order's status.</param>
        /// <param name="tagId">ID of the tag. Call Accounts/ListTags to obtain a list of tags for this account.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ListOrdersByTagAsync(string orderStatus, string tagId, string page, string pageSize)
        {
            return ListOrdersByTagAsync(orderStatus, tagId, page, pageSize, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Orders By Tag
        /// </summary>
        /// <remarks>
        /// ists all orders that match the specified status and tag ID.
        /// </remarks>
        /// <param name="orderStatus">The order's status.</param>
        /// <param name="tagId">ID of the tag. Call Accounts/ListTags to obtain a list of tags for this account.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ListOrdersByTagAsync(string orderStatus, string tagId, string page, string pageSize, System.Threading.CancellationToken cancellationToken)
        {
            if (orderStatus == null)
                throw new System.ArgumentNullException("orderStatus");

            if (tagId == null)
                throw new System.ArgumentNullException("tagId");

            if (page == null)
                throw new System.ArgumentNullException("page");

            if (pageSize == null)
                throw new System.ArgumentNullException("pageSize");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/listbytag"
                    urlBuilder_.Append("orders/listbytag");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderStatus")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderStatus, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tagId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tagId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Retrieve a single order from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetOrder> GetOrderAsync(string orderId)
        {
            return GetOrderAsync(orderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Order
        /// </summary>
        /// <remarks>
        /// Retrieve a single order from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetOrder> GetOrderAsync(string orderId, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/{orderId}"
                    urlBuilder_.Append("orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Order
        /// </summary>
        /// <remarks>
        /// Removes order from ShipStation's UI. Note this is a "soft" delete action so the order will still exist in the database, but will be set to inactive.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeleteOrder> DeleteOrderAsync(string orderId)
        {
            return DeleteOrderAsync(orderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Order
        /// </summary>
        /// <remarks>
        /// Removes order from ShipStation's UI. Note this is a "soft" delete action so the order will still exist in the database, but will be set to inactive.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeleteOrder> DeleteOrderAsync(string orderId, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/{orderId}"
                    urlBuilder_.Append("orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeleteOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Hold Order Until
        /// </summary>
        /// <remarks>
        /// This method will change the status of the given order to On Hold until the date specified, when the status will automatically change to Awaiting Shipment.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<HoldOrderUntil> HoldOrderUntilAsync(string body)
        {
            return HoldOrderUntilAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Hold Order Until
        /// </summary>
        /// <remarks>
        /// This method will change the status of the given order to On Hold until the date specified, when the status will automatically change to Awaiting Shipment.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<HoldOrderUntil> HoldOrderUntilAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/holduntil"
                    urlBuilder_.Append("orders/holduntil");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HoldOrderUntil>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark an Order as Shipped
        /// </summary>
        /// <remarks>
        /// Marks an order as shipped without creating a label in ShipStation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarkanOrderasShipped> MarkanOrderasShippedAsync(string body)
        {
            return MarkanOrderasShippedAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark an Order as Shipped
        /// </summary>
        /// <remarks>
        /// Marks an order as shipped without creating a label in ShipStation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarkanOrderasShipped> MarkanOrderasShippedAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/markasshipped"
                    urlBuilder_.Append("orders/markasshipped");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarkanOrderasShipped>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove Tag from Order
        /// </summary>
        /// <remarks>
        /// Removes a tag from the specified order.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RemoveTagfromOrder> RemoveTagfromOrderAsync(string body)
        {
            return RemoveTagfromOrderAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Tag from Order
        /// </summary>
        /// <remarks>
        /// Removes a tag from the specified order.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RemoveTagfromOrder> RemoveTagfromOrderAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/removetag"
                    urlBuilder_.Append("orders/removetag");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RemoveTagfromOrder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Restore Order from On Hold
        /// </summary>
        /// <remarks>
        /// This method will change the status of the given order from On Hold to Awaiting Shipment. This endpoint is used when a holdUntil Date is attached to an order.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RestoreOrderfromOnHold> RestoreOrderfromOnHoldAsync(string body)
        {
            return RestoreOrderfromOnHoldAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore Order from On Hold
        /// </summary>
        /// <remarks>
        /// This method will change the status of the given order from On Hold to Awaiting Shipment. This endpoint is used when a holdUntil Date is attached to an order.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RestoreOrderfromOnHold> RestoreOrderfromOnHoldAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/restorefromhold"
                    urlBuilder_.Append("orders/restorefromhold");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestoreOrderfromOnHold>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unassign User from Order
        /// </summary>
        /// <remarks>
        /// Unassigns a user from an order.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UnassignUserfromOrderAsync(UnassignUserfromOrderRequest body)
        {
            return UnassignUserfromOrderAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unassign User from Order
        /// </summary>
        /// <remarks>
        /// Unassigns a user from an order.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UnassignUserfromOrderAsync(UnassignUserfromOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "orders/unassignuser"
                    urlBuilder_.Append("orders/unassignuser");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a Product
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetaProduct> GetaProductAsync(string productId)
        {
            return GetaProductAsync(productId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a Product
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetaProduct> GetaProductAsync(string productId, System.Threading.CancellationToken cancellationToken)
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "products/{productId}"
                    urlBuilder_.Append("products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetaProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates an existing product. This call does not currently support partial updates. The entire resource must be provided in the body of the request.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateaProduct> UpdateaProductAsync(string productId, string body)
        {
            return UpdateaProductAsync(productId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a Product
        /// </summary>
        /// <remarks>
        /// Updates an existing product. This call does not currently support partial updates. The entire resource must be provided in the body of the request.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateaProduct> UpdateaProductAsync(string productId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "products/{productId}"
                    urlBuilder_.Append("products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateaProduct>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Obtains a list of products that match the specified criteria. All of the available filters are optional. They do not need to be included in the URL.
        /// </remarks>
        /// <param name="sku">Returns products that match the specified SKU.</param>
        /// <param name="name">Returns products that match the specified product name.</param>
        /// <param name="productCategoryId">Returns products that match the specified productCategoryId.</param>
        /// <param name="productTypeId">Returns products that match the specified productTypeId.</param>
        /// <param name="tagId">Returns products that match the specified tagId.</param>
        /// <param name="startDate">Returns products that were created after the specified date.</param>
        /// <param name="endDate">Returns products that were created before the specified date.</param>
        /// <param name="showInactive">Specifies whether the list should include inactive products.</param>
        /// <param name="sortBy">Sorts the order of the response based off the specified value.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ListProducts> ListProductsAsync(string sku, string name, string productCategoryId, string productTypeId, string tagId, string startDate, string endDate, string showInactive, string sortBy, string sortDir, string page, string pageSize)
        {
            return ListProductsAsync(sku, name, productCategoryId, productTypeId, tagId, startDate, endDate, showInactive, sortBy, sortDir, page, pageSize, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Obtains a list of products that match the specified criteria. All of the available filters are optional. They do not need to be included in the URL.
        /// </remarks>
        /// <param name="sku">Returns products that match the specified SKU.</param>
        /// <param name="name">Returns products that match the specified product name.</param>
        /// <param name="productCategoryId">Returns products that match the specified productCategoryId.</param>
        /// <param name="productTypeId">Returns products that match the specified productTypeId.</param>
        /// <param name="tagId">Returns products that match the specified tagId.</param>
        /// <param name="startDate">Returns products that were created after the specified date.</param>
        /// <param name="endDate">Returns products that were created before the specified date.</param>
        /// <param name="showInactive">Specifies whether the list should include inactive products.</param>
        /// <param name="sortBy">Sorts the order of the response based off the specified value.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Requested page size. Max value is 500.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListProducts> ListProductsAsync(string sku, string name, string productCategoryId, string productTypeId, string tagId, string startDate, string endDate, string showInactive, string sortBy, string sortDir, string page, string pageSize, System.Threading.CancellationToken cancellationToken)
        {
            if (sku == null)
                throw new System.ArgumentNullException("sku");

            if (name == null)
                throw new System.ArgumentNullException("name");

            if (productCategoryId == null)
                throw new System.ArgumentNullException("productCategoryId");

            if (productTypeId == null)
                throw new System.ArgumentNullException("productTypeId");

            if (tagId == null)
                throw new System.ArgumentNullException("tagId");

            if (startDate == null)
                throw new System.ArgumentNullException("startDate");

            if (endDate == null)
                throw new System.ArgumentNullException("endDate");

            if (showInactive == null)
                throw new System.ArgumentNullException("showInactive");

            if (sortBy == null)
                throw new System.ArgumentNullException("sortBy");

            if (sortDir == null)
                throw new System.ArgumentNullException("sortDir");

            if (page == null)
                throw new System.ArgumentNullException("page");

            if (pageSize == null)
                throw new System.ArgumentNullException("pageSize");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "products"
                    urlBuilder_.Append("products");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sku")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sku, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("productCategoryId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productCategoryId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("productTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tagId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tagId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("startDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(startDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("endDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("showInactive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showInactive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortDir")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDir, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListProducts>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Shipment Label
        /// </summary>
        /// <remarks>
        /// Creates a shipping label. The `labelData` field returned in the response is a base64 encoded PDF value. Simply decode and save the output as a PDF file to retrieve a printable label.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateShipmentLabelAsync(CreateShipmentLabelRequest body)
        {
            return CreateShipmentLabelAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Shipment Label
        /// </summary>
        /// <remarks>
        /// Creates a shipping label. The `labelData` field returned in the response is a base64 encoded PDF value. Simply decode and save the output as a PDF file to retrieve a printable label.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateShipmentLabelAsync(CreateShipmentLabelRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shipments/createlabel"
                    urlBuilder_.Append("shipments/createlabel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Rates
        /// </summary>
        /// <remarks>
        /// Retrieves shipping rates for the specified shipping details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetRate>> GetRatesAsync(GetRatesRequest body)
        {
            return GetRatesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Rates
        /// </summary>
        /// <remarks>
        /// Retrieves shipping rates for the specified shipping details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetRate>> GetRatesAsync(GetRatesRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shipments/getrates"
                    urlBuilder_.Append("shipments/getrates");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GetRate>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Shipments
        /// </summary>
        /// <remarks>
        /// Obtains a list of shipments that match the specified criteria.
        /// </remarks>
        /// <param name="recipientName">Returns shipments shipped to the specified recipient name.</param>
        /// <param name="recipientCountryCode">Returns shipments shipped to the specified country code.</param>
        /// <param name="orderNumber">Returns shipments whose orders have the specified order number.</param>
        /// <param name="orderId">Returns shipments whose orders have the specified order ID.</param>
        /// <param name="carrierCode">Returns shipments shipped with the specified carrier.</param>
        /// <param name="serviceCode">Returns shipments shipped with the specified shipping service.</param>
        /// <param name="trackingNumber">Returns shipments with the specified tracking number.</param>
        /// <param name="createDateStart">Returns shipments created on or after the specified createDate.</param>
        /// <param name="createDateEnd">Returns shipments created on or before the specified createDate.</param>
        /// <param name="shipDateStart">Returns shipments with the shipDate on or after the specified date.</param>
        /// <param name="shipDateEnd">Returns shipments with the shipDate on or before the specified date.</param>
        /// <param name="voidDateStart">Returns shipments voided on or after the specified date.</param>
        /// <param name="voidDateEnd">Returns shipments voided on or before the specified date.</param>
        /// <param name="storeId">Returns shipments whose orders belong to the specified store ID.</param>
        /// <param name="includeShipmentItems">Specifies whether to include shipment items with results Default value: false.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current.) If left empty, the response will be sorted by ascending createDate.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ListShipmentsAsync(string recipientName, string recipientCountryCode, string orderNumber, string orderId, string carrierCode, string serviceCode, string trackingNumber, string createDateStart, string createDateEnd, string shipDateStart, string shipDateEnd, string voidDateStart, string voidDateEnd, string storeId, string includeShipmentItems, string sortBy, string sortDir, string page, string pageSize)
        {
            return ListShipmentsAsync(recipientName, recipientCountryCode, orderNumber, orderId, carrierCode, serviceCode, trackingNumber, createDateStart, createDateEnd, shipDateStart, shipDateEnd, voidDateStart, voidDateEnd, storeId, includeShipmentItems, sortBy, sortDir, page, pageSize, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Shipments
        /// </summary>
        /// <remarks>
        /// Obtains a list of shipments that match the specified criteria.
        /// </remarks>
        /// <param name="recipientName">Returns shipments shipped to the specified recipient name.</param>
        /// <param name="recipientCountryCode">Returns shipments shipped to the specified country code.</param>
        /// <param name="orderNumber">Returns shipments whose orders have the specified order number.</param>
        /// <param name="orderId">Returns shipments whose orders have the specified order ID.</param>
        /// <param name="carrierCode">Returns shipments shipped with the specified carrier.</param>
        /// <param name="serviceCode">Returns shipments shipped with the specified shipping service.</param>
        /// <param name="trackingNumber">Returns shipments with the specified tracking number.</param>
        /// <param name="createDateStart">Returns shipments created on or after the specified createDate.</param>
        /// <param name="createDateEnd">Returns shipments created on or before the specified createDate.</param>
        /// <param name="shipDateStart">Returns shipments with the shipDate on or after the specified date.</param>
        /// <param name="shipDateEnd">Returns shipments with the shipDate on or before the specified date.</param>
        /// <param name="voidDateStart">Returns shipments voided on or after the specified date.</param>
        /// <param name="voidDateEnd">Returns shipments voided on or before the specified date.</param>
        /// <param name="storeId">Returns shipments whose orders belong to the specified store ID.</param>
        /// <param name="includeShipmentItems">Specifies whether to include shipment items with results Default value: false.</param>
        /// <param name="sortBy">Sort the responses by a set value. The response will be sorted based off the ascending dates (oldest to most current.) If left empty, the response will be sorted by ascending createDate.</param>
        /// <param name="sortDir">Sets the direction of the sort order.</param>
        /// <param name="page">Page number.</param>
        /// <param name="pageSize">Page size.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ListShipmentsAsync(string recipientName, string recipientCountryCode, string orderNumber, string orderId, string carrierCode, string serviceCode, string trackingNumber, string createDateStart, string createDateEnd, string shipDateStart, string shipDateEnd, string voidDateStart, string voidDateEnd, string storeId, string includeShipmentItems, string sortBy, string sortDir, string page, string pageSize, System.Threading.CancellationToken cancellationToken)
        {
            if (recipientName == null)
                throw new System.ArgumentNullException("recipientName");

            if (recipientCountryCode == null)
                throw new System.ArgumentNullException("recipientCountryCode");

            if (orderNumber == null)
                throw new System.ArgumentNullException("orderNumber");

            if (orderId == null)
                throw new System.ArgumentNullException("orderId");

            if (carrierCode == null)
                throw new System.ArgumentNullException("carrierCode");

            if (serviceCode == null)
                throw new System.ArgumentNullException("serviceCode");

            if (trackingNumber == null)
                throw new System.ArgumentNullException("trackingNumber");

            if (createDateStart == null)
                throw new System.ArgumentNullException("createDateStart");

            if (createDateEnd == null)
                throw new System.ArgumentNullException("createDateEnd");

            if (shipDateStart == null)
                throw new System.ArgumentNullException("shipDateStart");

            if (shipDateEnd == null)
                throw new System.ArgumentNullException("shipDateEnd");

            if (voidDateStart == null)
                throw new System.ArgumentNullException("voidDateStart");

            if (voidDateEnd == null)
                throw new System.ArgumentNullException("voidDateEnd");

            if (storeId == null)
                throw new System.ArgumentNullException("storeId");

            if (includeShipmentItems == null)
                throw new System.ArgumentNullException("includeShipmentItems");

            if (sortBy == null)
                throw new System.ArgumentNullException("sortBy");

            if (sortDir == null)
                throw new System.ArgumentNullException("sortDir");

            if (page == null)
                throw new System.ArgumentNullException("page");

            if (pageSize == null)
                throw new System.ArgumentNullException("pageSize");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shipments"
                    urlBuilder_.Append("shipments");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("recipientName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(recipientName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("recipientCountryCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(recipientCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("orderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("carrierCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(carrierCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceCode")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceCode, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("trackingNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(trackingNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("createDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("createDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(createDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("shipDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("shipDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shipDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("voidDateStart")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(voidDateStart, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("voidDateEnd")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(voidDateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("storeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("includeShipmentItems")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeShipmentItems, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortDir")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortDir, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Void Shipment Label
        /// </summary>
        /// <remarks>
        /// Voids the specified label by shipmentId.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task VoidShipmentLabelAsync(VoidShipmentLabelRequest body)
        {
            return VoidShipmentLabelAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Void Shipment Label
        /// </summary>
        /// <remarks>
        /// Voids the specified label by shipmentId.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task VoidShipmentLabelAsync(VoidShipmentLabelRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "shipments/voidlabel"
                    urlBuilder_.Append("shipments/voidlabel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Stores
        /// </summary>
        /// <remarks>
        /// Retrieve the list of installed stores on the account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListStore>> ListStoresAsync()
        {
            return ListStoresAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Stores
        /// </summary>
        /// <remarks>
        /// Retrieve the list of installed stores on the account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListStore>> ListStoresAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stores"
                    urlBuilder_.Append("stores");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ListStore>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Store
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetStore> GetStoreAsync(string storeId)
        {
            return GetStoreAsync(storeId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Store
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetStore> GetStoreAsync(string storeId, System.Threading.CancellationToken cancellationToken)
        {
            if (storeId == null)
                throw new System.ArgumentNullException("storeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stores/{storeId}"
                    urlBuilder_.Append("stores/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(storeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetStore>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Store
        /// </summary>
        /// <remarks>
        /// Updates an existing store.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateStoreAsync(string storeId, string body)
        {
            return UpdateStoreAsync(storeId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Store
        /// </summary>
        /// <remarks>
        /// Updates an existing store.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateStoreAsync(string storeId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (storeId == null)
                throw new System.ArgumentNullException("storeId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stores/{storeId}"
                    urlBuilder_.Append("stores/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(storeId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deactivate Store
        /// </summary>
        /// <remarks>
        /// Deactivates the specified store.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeactivateStore> DeactivateStoreAsync(DeactivateStoreRequest body)
        {
            return DeactivateStoreAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deactivate Store
        /// </summary>
        /// <remarks>
        /// Deactivates the specified store.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeactivateStore> DeactivateStoreAsync(DeactivateStoreRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stores/deactivate"
                    urlBuilder_.Append("stores/deactivate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeactivateStore>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reactivate Store
        /// </summary>
        /// <remarks>
        /// Reactivates the specified store.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReactivateStore> ReactivateStoreAsync(ReactivateStoreRequest body)
        {
            return ReactivateStoreAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reactivate Store
        /// </summary>
        /// <remarks>
        /// Reactivates the specified store.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReactivateStore> ReactivateStoreAsync(ReactivateStoreRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stores/reactivate"
                    urlBuilder_.Append("stores/reactivate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReactivateStore>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Marketplaces
        /// </summary>
        /// <remarks>
        /// Lists the marketplaces that can be integrated with ShipStation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListMarketplace>> ListMarketplacesAsync()
        {
            return ListMarketplacesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Marketplaces
        /// </summary>
        /// <remarks>
        /// Lists the marketplaces that can be integrated with ShipStation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListMarketplace>> ListMarketplacesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stores/marketplaces"
                    urlBuilder_.Append("stores/marketplaces");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ListMarketplace>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Refresh Store
        /// </summary>
        /// <remarks>
        /// Initiates a store refresh.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RefreshStoreAsync(string body)
        {
            return RefreshStoreAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Refresh Store
        /// </summary>
        /// <remarks>
        /// Initiates a store refresh.
        /// </remarks>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RefreshStoreAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stores/refreshstore"
                    urlBuilder_.Append("stores/refreshstore");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Store Refresh status
        /// </summary>
        /// <remarks>
        /// Retrieves the refresh status of a given store.
        /// </remarks>
        /// <param name="storeId">Specifies the store whose status will be retrieved.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetStoreRefreshstatusAsync(string storeId)
        {
            return GetStoreRefreshstatusAsync(storeId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Store Refresh status
        /// </summary>
        /// <remarks>
        /// Retrieves the refresh status of a given store.
        /// </remarks>
        /// <param name="storeId">Specifies the store whose status will be retrieved.</param>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetStoreRefreshstatusAsync(string storeId, System.Threading.CancellationToken cancellationToken)
        {
            if (storeId == null)
                throw new System.ArgumentNullException("storeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "stores/getrefreshstatus"
                    urlBuilder_.Append("stores/getrefreshstatus");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("storeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Users
        /// </summary>
        /// <param name="showInactive">Determines whether inactive users will be returned in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListUser>> ListUsersAsync(bool showInactive)
        {
            return ListUsersAsync(showInactive, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Users
        /// </summary>
        /// <param name="showInactive">Determines whether inactive users will be returned in the response.</param>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListUser>> ListUsersAsync(bool showInactive, System.Threading.CancellationToken cancellationToken)
        {
            if (showInactive == null)
                throw new System.ArgumentNullException("showInactive");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "users"
                    urlBuilder_.Append("users");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("showInactive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(showInactive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ListUser>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Warehouse
        /// </summary>
        /// <remarks>
        /// Adds a Ship From Location (formerly known as warehouse) to your account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateWarehouse> CreateWarehouseAsync(CreateWarehouseRequest body)
        {
            return CreateWarehouseAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Warehouse
        /// </summary>
        /// <remarks>
        /// Adds a Ship From Location (formerly known as warehouse) to your account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateWarehouse> CreateWarehouseAsync(CreateWarehouseRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "warehouses/createwarehouse"
                    urlBuilder_.Append("warehouses/createwarehouse");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateWarehouse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Warehouses
        /// </summary>
        /// <remarks>
        /// Retrieves a list of your Ship From Locations (formerly known as warehouses).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListWarehouse>> ListWarehousesAsync()
        {
            return ListWarehousesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Warehouses
        /// </summary>
        /// <remarks>
        /// Retrieves a list of your Ship From Locations (formerly known as warehouses).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ListWarehouse>> ListWarehousesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "warehouses"
                    urlBuilder_.Append("warehouses");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ListWarehouse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Warehouse
        /// </summary>
        /// <remarks>
        /// Returns a list of active Ship From Locations (formerly known as warehouses) on the ShipStation account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWarehouse> GetWarehouseAsync(string warehouseId)
        {
            return GetWarehouseAsync(warehouseId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Warehouse
        /// </summary>
        /// <remarks>
        /// Returns a list of active Ship From Locations (formerly known as warehouses) on the ShipStation account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWarehouse> GetWarehouseAsync(string warehouseId, System.Threading.CancellationToken cancellationToken)
        {
            if (warehouseId == null)
                throw new System.ArgumentNullException("warehouseId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "warehouses/{warehouseId}"
                    urlBuilder_.Append("warehouses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(warehouseId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWarehouse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update Warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing Ship From Location (formerly known as warehouse). &lt;br/&gt;&lt;br/&gt;
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/> If a "returnAddress" object is not specified, your "originAddress" will be used as your "returnAddress".
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateWarehouse> UpdateWarehouseAsync(string warehouseId, string body)
        {
            return UpdateWarehouseAsync(warehouseId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing Ship From Location (formerly known as warehouse). &lt;br/&gt;&lt;br/&gt;
        /// <br/>
        /// <br/>
        /// <br/>
        /// <br/> If a "returnAddress" object is not specified, your "originAddress" will be used as your "returnAddress".
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateWarehouse> UpdateWarehouseAsync(string warehouseId, string body, System.Threading.CancellationToken cancellationToken)
        {
            if (warehouseId == null)
                throw new System.ArgumentNullException("warehouseId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "warehouses/{warehouseId}"
                    urlBuilder_.Append("warehouses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(warehouseId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateWarehouse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a warehouse
        /// </summary>
        /// <remarks>
        /// Removes a warehouse from ShipStation's UI.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Deleteawarehouse> DeleteawarehouseAsync(string warehouseId)
        {
            return DeleteawarehouseAsync(warehouseId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a warehouse
        /// </summary>
        /// <remarks>
        /// Removes a warehouse from ShipStation's UI.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Deleteawarehouse> DeleteawarehouseAsync(string warehouseId, System.Threading.CancellationToken cancellationToken)
        {
            if (warehouseId == null)
                throw new System.ArgumentNullException("warehouseId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "warehouses/{warehouseId}"
                    urlBuilder_.Append("warehouses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(warehouseId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Deleteawarehouse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieves a list of registered webhooks for the account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ListWebhooks> ListWebhooksAsync()
        {
            return ListWebhooksAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// Retrieves a list of registered webhooks for the account.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ListWebhooks> ListWebhooksAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "webhooks"
                    urlBuilder_.Append("webhooks");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListWebhooks>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Subscribe to Webhook
        /// </summary>
        /// <remarks>
        /// Subscribes to a specific type of webhook. If a `store_id` is passed in, the webhooks will only be triggered for that specific `store_id`. The `event` type that is passed in will determine what type of webhooks will be sent.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SubscribetoWebhook> SubscribetoWebhookAsync(SubscribetoWebhookRequest body)
        {
            return SubscribetoWebhookAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Subscribe to Webhook
        /// </summary>
        /// <remarks>
        /// Subscribes to a specific type of webhook. If a `store_id` is passed in, the webhooks will only be triggered for that specific `store_id`. The `event` type that is passed in will determine what type of webhooks will be sent.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscribetoWebhook> SubscribetoWebhookAsync(SubscribetoWebhookRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "webhooks/subscribe"
                    urlBuilder_.Append("webhooks/subscribe");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscribetoWebhook>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ShipStationException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unsubscribe to Webhook
        /// </summary>
        /// <remarks>
        /// Unsubscribes from a certain webhook.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UnsubscribetoWebhookAsync(string webhookId)
        {
            return UnsubscribetoWebhookAsync(webhookId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unsubscribe to Webhook
        /// </summary>
        /// <remarks>
        /// Unsubscribes from a certain webhook.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ShipStationException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UnsubscribetoWebhookAsync(string webhookId, System.Threading.CancellationToken cancellationToken)
        {
            if (webhookId == null)
                throw new System.ArgumentNullException("webhookId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "webhooks/{webhookId}"
                    urlBuilder_.Append("webhooks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(webhookId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ShipStationException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ShipStationException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ShipStationException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddfundstocarrieraccountRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public int Amount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCarrierByCode
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        public string? AccountNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresFundedAccount")]
        public bool RequiresFundedAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public int Balance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nickname")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nickname { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingProviderId")]
        public int ShippingProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("primary")]
        public bool Primary { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListCarrier
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        public string? AccountNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresFundedAccount")]
        public bool RequiresFundedAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public int Balance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nickname")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nickname { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingProviderId")]
        public int ShippingProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("primary")]
        public bool Primary { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListPackage
    {

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("domestic")]
        public bool Domestic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("international")]
        public bool International { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListService
    {

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("domestic")]
        public bool Domestic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("international")]
        public bool International { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListCustomers
    {

        [System.Text.Json.Serialization.JsonPropertyName("customers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Customer> Customers { get; set; } = new System.Collections.ObjectModel.Collection<Customer>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pages")]
        public int Pages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Customer
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int CustomerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressVerified")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressVerified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplaceUsernames")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MarketplaceUsername> MarketplaceUsernames { get; set; } = new System.Collections.ObjectModel.Collection<MarketplaceUsername>();

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketplaceUsername
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerUserId")]
        public int CustomerUserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int CustomerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplaceId")]
        public int MarketplaceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplace")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Marketplace { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetCustomer
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int CustomerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CountryCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressVerified")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressVerified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplaceUsernames")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MarketplaceUsername> MarketplaceUsernames { get; set; } = new System.Collections.ObjectModel.Collection<MarketplaceUsername>();

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUpdateOrder
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        public int OrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderKey")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipByDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int CustomerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerUsername")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerUsername { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerEmail")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public BillTo BillTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipTo ShipTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Item> Items { get; set; } = new System.Collections.ObjectModel.Collection<Item>();

        [System.Text.Json.Serialization.JsonPropertyName("orderTotal")]
        public double OrderTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountPaid")]
        public double AmountPaid { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public int TaxAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingAmount")]
        public int ShippingAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerNotes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalNotes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InternalNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gift")]
        public bool Gift { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("giftMessage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GiftMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PaymentMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestedShippingService")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestedShippingService { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("confirmation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Confirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("holdUntilDate")]
        public string? HoldUntilDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensions")]
        [System.ComponentModel.DataAnnotations.Required]
        public Dimensions Dimensions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public InsuranceOptions InsuranceOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internationalOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public InternationalOptions InternationalOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public AdvancedOptions AdvancedOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagIds")]
        public string? TagIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externallyFulfilled")]
        public bool ExternallyFulfilled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externallyFulfilledBy")]
        public string? ExternallyFulfilledBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labelMessages")]
        public string? LabelMessages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillTo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        public string? Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        public string? Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        public string? Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street3")]
        public string? Street3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residential")]
        public string? Residential { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressVerified")]
        public string? AddressVerified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipTo
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street3")]
        public string? Street3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residential")]
        public bool Residential { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressVerified")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressVerified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Item
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderItemId")]
        public int OrderItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lineItemKey")]
        public string? LineItemKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public double UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public object? TaxAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingAmount")]
        public object? ShippingAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocation")]
        public string? WarehouseLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("options")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Option> Options { get; set; } = new System.Collections.ObjectModel.Collection<Option>();

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public object? ProductId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fulfillmentSku")]
        public string? FulfillmentSku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustment")]
        public bool Adjustment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("upc")]
        public string? Upc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public int Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Units { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WeightUnits")]
        public int WeightUnits { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Option
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dimensions
    {

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Units { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("length")]
        public int Length { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InsuranceOptions
    {

        [System.Text.Json.Serialization.JsonPropertyName("provider")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Provider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insureShipment")]
        public bool InsureShipment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuredValue")]
        public int InsuredValue { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternationalOptions
    {

        [System.Text.Json.Serialization.JsonPropertyName("contents")]
        public string? Contents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsItems")]
        public string? CustomsItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDelivery")]
        public string? NonDelivery { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvancedOptions
    {

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public string? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonMachinable")]
        public bool NonMachinable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayDelivery")]
        public bool SaturdayDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsAlcohol")]
        public bool ContainsAlcohol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mergedOrSplit")]
        public bool MergedOrSplit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mergedIds")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MergedIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string? ParentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storeId")]
        public int StoreId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customField1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomField1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customField2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomField2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customField3")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomField3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Source { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToParty")]
        public string? BillToParty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToAccount")]
        public string? BillToAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToPostalCode")]
        public string? BillToPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToCountryCode")]
        public string? BillToCountryCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToMyOtherAccount")]
        public string? BillToMyOtherAccount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUpdateMultipleOrders
    {

        [System.Text.Json.Serialization.JsonPropertyName("hasErrors")]
        public bool HasErrors { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Result> Results { get; set; } = new System.Collections.ObjectModel.Collection<Result>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        public int OrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderKey")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignUserToOrderRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderIds")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> OrderIds { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddTagToOrder
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListOrders
    {

        [System.Text.Json.Serialization.JsonPropertyName("orders")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Order> Orders { get; set; } = new System.Collections.ObjectModel.Collection<Order>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pages")]
        public int Pages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Order
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        public int OrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderKey")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipByDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int CustomerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerUsername")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerUsername { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerEmail")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public BillTo BillTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipTo ShipTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Item> Items { get; set; } = new System.Collections.ObjectModel.Collection<Item>();

        [System.Text.Json.Serialization.JsonPropertyName("orderTotal")]
        public double OrderTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountPaid")]
        public double AmountPaid { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public int TaxAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingAmount")]
        public int ShippingAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerNotes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalNotes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InternalNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gift")]
        public bool Gift { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("giftMessage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GiftMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PaymentMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestedShippingService")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestedShippingService { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("confirmation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Confirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("holdUntilDate")]
        public string? HoldUntilDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensions")]
        [System.ComponentModel.DataAnnotations.Required]
        public Dimensions Dimensions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public InsuranceOptions InsuranceOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internationalOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public InternationalOptions InternationalOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public AdvancedOptions1 AdvancedOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagIds")]
        public string? TagIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externallyFulfilled")]
        public bool ExternallyFulfilled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externallyFulfilledBy")]
        public string? ExternallyFulfilledBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labelMessages")]
        public string? LabelMessages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdvancedOptions1
    {

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public int WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonMachinable")]
        public bool NonMachinable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("saturdayDelivery")]
        public bool SaturdayDelivery { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containsAlcohol")]
        public bool ContainsAlcohol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mergedOrSplit")]
        public bool MergedOrSplit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mergedIds")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> MergedIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string? ParentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storeId")]
        public int StoreId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customField1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomField1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customField2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomField2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customField3")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomField3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Source { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToParty")]
        public string? BillToParty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToAccount")]
        public string? BillToAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToPostalCode")]
        public string? BillToPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToCountryCode")]
        public string? BillToCountryCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billToMyOtherAccount")]
        public string? BillToMyOtherAccount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOrder
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        public int OrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderKey")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipByDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipByDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public int CustomerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerUsername")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerUsername { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerEmail")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("billTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public BillTo BillTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipTo ShipTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Item> Items { get; set; } = new System.Collections.ObjectModel.Collection<Item>();

        [System.Text.Json.Serialization.JsonPropertyName("orderTotal")]
        public double OrderTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountPaid")]
        public double AmountPaid { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public int TaxAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shippingAmount")]
        public int ShippingAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerNotes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalNotes")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InternalNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gift")]
        public bool Gift { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("giftMessage")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GiftMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentMethod")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PaymentMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestedShippingService")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RequestedShippingService { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("confirmation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Confirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("holdUntilDate")]
        public string? HoldUntilDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensions")]
        [System.ComponentModel.DataAnnotations.Required]
        public Dimensions Dimensions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public InsuranceOptions InsuranceOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internationalOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public InternationalOptions InternationalOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedOptions")]
        [System.ComponentModel.DataAnnotations.Required]
        public AdvancedOptions1 AdvancedOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tagIds")]
        public string? TagIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externallyFulfilled")]
        public bool ExternallyFulfilled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externallyFulfilledBy")]
        public string? ExternallyFulfilledBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("labelMessages")]
        public string? LabelMessages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HoldOrderUntil
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteOrder
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkanOrderasShipped
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]
        public int OrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoveTagfromOrder
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestoreOrderfromOnHold
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnassignUserfromOrderRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderIds")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> OrderIds { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetaProduct
    {

        [System.Text.Json.Serialization.JsonPropertyName("aliases")]
        public string? Aliases { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public int ProductId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultCost")]
        public string? DefaultCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("length")]
        public string? Length { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public string? Width { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public string? Height { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightOz")]
        public string? WeightOz { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalNotes")]
        public string? InternalNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fulfillmentSku")]
        public string? FulfillmentSku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        public string? ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategory")]
        public string? ProductCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productType")]
        public string? ProductType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocation")]
        public string? WarehouseLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultCarrierCode")]
        public string? DefaultCarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultServiceCode")]
        public string? DefaultServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultPackageCode")]
        public string? DefaultPackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultIntlCarrierCode")]
        public string? DefaultIntlCarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultIntlServiceCode")]
        public string? DefaultIntlServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultIntlPackageCode")]
        public string? DefaultIntlPackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultConfirmation")]
        public string? DefaultConfirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultIntlConfirmation")]
        public string? DefaultIntlConfirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsDescription")]
        public string? CustomsDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsValue")]
        public string? CustomsValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsTariffNo")]
        public string? CustomsTariffNo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsCountryCode")]
        public string? CustomsCountryCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noCustoms")]
        public string? NoCustoms { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListProducts
    {

        [System.Text.Json.Serialization.JsonPropertyName("products")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Product> Products { get; set; } = new System.Collections.ObjectModel.Collection<Product>();

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public int Page { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pages")]
        public int Pages { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {

        [System.Text.Json.Serialization.JsonPropertyName("aliases")]
        public string? Aliases { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public int ProductId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public double Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultCost")]
        public string? DefaultCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("length")]
        public string? Length { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public string? Width { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public string? Height { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightOz")]
        public string? WeightOz { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalNotes")]
        public string? InternalNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fulfillmentSku")]
        public string? FulfillmentSku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        public string? ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCategory")]
        public string? ProductCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productType")]
        public string? ProductType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocation")]
        public string? WarehouseLocation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultCarrierCode")]
        public string? DefaultCarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultServiceCode")]
        public string? DefaultServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultPackageCode")]
        public string? DefaultPackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultIntlCarrierCode")]
        public string? DefaultIntlCarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultIntlServiceCode")]
        public string? DefaultIntlServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultIntlPackageCode")]
        public string? DefaultIntlPackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultConfirmation")]
        public string? DefaultConfirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultIntlConfirmation")]
        public string? DefaultIntlConfirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsDescription")]
        public string? CustomsDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsValue")]
        public string? CustomsValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsTariffNo")]
        public string? CustomsTariffNo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customsCountryCode")]
        public string? CustomsCountryCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noCustoms")]
        public string? NoCustoms { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public string? Tags { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateaProduct
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateShipmentLabelRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("confirmation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Confirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShipDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight6 Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensions")]
        [System.ComponentModel.DataAnnotations.Required]
        public Dimensions Dimensions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipFrom")]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipFrom ShipFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipTo")]
        [System.ComponentModel.DataAnnotations.Required]
        public ShipTo3 ShipTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceOptions")]
        public string? InsuranceOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internationalOptions")]
        public string? InternationalOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedOptions")]
        public string? AdvancedOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("testLabel")]
        public bool TestLabel { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Weight6
    {

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public int Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("units")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Units { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipFrom
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street3")]
        public string? Street3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residential")]
        public bool Residential { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipTo3
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street3")]
        public string? Street3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residential")]
        public bool Residential { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRatesRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("carrierCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CarrierCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceCode")]
        public string? ServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageCode")]
        public string? PackageCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromPostalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FromPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toState")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toCountry")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToCountry { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toPostalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToPostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toCity")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ToCity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        [System.ComponentModel.DataAnnotations.Required]
        public Weight6 Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensions")]
        [System.ComponentModel.DataAnnotations.Required]
        public Dimensions Dimensions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("confirmation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Confirmation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residential")]
        public bool Residential { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRate
    {

        [System.Text.Json.Serialization.JsonPropertyName("serviceName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shipmentCost")]
        public double ShipmentCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherCost")]
        public double OtherCost { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoidShipmentLabelRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("shipmentId")]
        public int ShipmentId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListStore
    {

        [System.Text.Json.Serialization.JsonPropertyName("storeId")]
        public int StoreId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storeName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StoreName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplaceId")]
        public int MarketplaceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplaceName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        public string? AccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("integrationUrl")]
        public string? IntegrationUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]
        public string? CompanyName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicEmail")]
        public string? PublicEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refreshDate")]
        public string? RefreshDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastRefreshAttempt")]
        public string? LastRefreshAttempt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("autoRefresh")]
        public bool AutoRefresh { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusMappings")]
        public string? StatusMappings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetStore
    {

        [System.Text.Json.Serialization.JsonPropertyName("storeId")]
        public int StoreId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storeName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StoreName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplaceId")]
        public int MarketplaceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplaceName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MarketplaceName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        public string? AccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("integrationUrl")]
        public string? IntegrationUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CompanyName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicEmail")]
        public string? PublicEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refreshDate")]
        public string? RefreshDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastRefreshAttempt")]
        public string? LastRefreshAttempt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifyDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ModifyDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("autoRefresh")]
        public bool AutoRefresh { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusMappings")]
        public string? StatusMappings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeactivateStoreRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("storeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StoreId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeactivateStore
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReactivateStoreRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("storeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StoreId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReactivateStore
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListMarketplace
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("marketplaceId")]
        public int MarketplaceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canRefresh")]
        public bool CanRefresh { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supportsCustomMappings")]
        public bool SupportsCustomMappings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supportsCustomStatuses")]
        public bool SupportsCustomStatuses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("canConfirmShipments")]
        public bool CanConfirmShipments { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListUser
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateWarehouseRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originAddress")]
        [System.ComponentModel.DataAnnotations.Required]
        public OriginAddress OriginAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnAddress")]
        public string? ReturnAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]
        public bool IsDefault { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OriginAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        public string? Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street3")]
        public string? Street3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residential")]
        public bool Residential { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateWarehouse
    {

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public int WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originAddress")]
        [System.ComponentModel.DataAnnotations.Required]
        public OriginAddress1 OriginAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnAddress")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnAddress ReturnAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]
        public bool IsDefault { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellerIntegrationId")]
        public string? SellerIntegrationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extInventoryIdentity")]
        public string? ExtInventoryIdentity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registerFedexMeter")]
        public string? RegisterFedexMeter { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OriginAddress1
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        public string? Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street3")]
        public string? Street3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residential")]
        public bool Residential { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressVerified")]
        public string? AddressVerified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReturnAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("company")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Company { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street1")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street2")]
        public string? Street2 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street3")]
        public string? Street3 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("residential")]
        public string? Residential { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressVerified")]
        public string? AddressVerified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListWarehouse
    {

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public int WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originAddress")]
        [System.ComponentModel.DataAnnotations.Required]
        public OriginAddress1 OriginAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnAddress")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnAddress ReturnAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]
        public bool IsDefault { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellerIntegrationId")]
        public string? SellerIntegrationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extInventoryIdentity")]
        public string? ExtInventoryIdentity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registerFedexMeter")]
        public string? RegisterFedexMeter { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWarehouse
    {

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public int WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originAddress")]
        [System.ComponentModel.DataAnnotations.Required]
        public OriginAddress1 OriginAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("returnAddress")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReturnAddress ReturnAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CreateDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]
        public bool IsDefault { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sellerIntegrationId")]
        public string? SellerIntegrationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extInventoryIdentity")]
        public string? ExtInventoryIdentity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registerFedexMeter")]
        public string? RegisterFedexMeter { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateWarehouse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deleteawarehouse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListWebhooks
    {

        [System.Text.Json.Serialization.JsonPropertyName("webhooks")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Webhook> Webhooks { get; set; } = new System.Collections.ObjectModel.Collection<Webhook>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Webhook
    {

        [System.Text.Json.Serialization.JsonPropertyName("IsLabelAPIHook")]
        public bool IsLabelAPIHook { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WebHookID")]
        public int WebHookID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("SellerID")]
        public int SellerID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("StoreID")]
        public string? StoreID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("HookType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string HookType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("MessageFormat")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MessageFormat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("BulkCopyBatchID")]
        public string? BulkCopyBatchID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("BulkCopyRecordID")]
        public string? BulkCopyRecordID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Active")]
        public bool Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("WebhookLogs")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> WebhookLogs { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("Seller")]
        public string? Seller { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("Store")]
        public string? Store { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscribetoWebhookRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("target_url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Target_url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("event")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Event { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("store_id")]
        public string? Store_id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("friendly_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Friendly_name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscribetoWebhook
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipStationException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ShipStationException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShipStationException<TResult> : ShipStationException
    {
        public TResult Result { get; private set; }

        public ShipStationException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625